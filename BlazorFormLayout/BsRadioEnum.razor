<p>TODO</p>
@*@typeparam TEnum
@inherits BsControlBase<TEnum>
<BsGroup Label="@Label" Id="@Id">
    @foreach (var item in GetValueOptions())
    {
        var thisKey = item.Key;
        var id = $"{controlName}_{item.Key}";
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="@controlName" id="@id"
                   checked="@(Value.Equals(thisKey))"
                   disabled="@(Mode == EditMode.ReadOnly)"
                   value="@thisKey" 
                   @onchange="@((ChangeEventArgs e) => { ChangeValue(thisKey); })" />
            <label class="form-check-label" for="@id">@item.Value</label>
        </div>
    }
</BsGroup>

@code
{
    override protected void OnParametersSet()
    {
        base.OnParametersSet();
        controlName = Helper.GetGeneratedName(Name);
    }

    void ChangeValue(TEnum value)
    {
        Value = value;
    }

    [Parameter] public string Name { get; set; }

    private string controlName;

    Dictionary<TEnum,string> GetValueOptions() => Helper.GetValueOptions<TEnum>();

    protected override bool TryParseValueFromString(string value, out TEnum result, out string validationErrorMessage)
    {
        // check type is enum
        if (typeof(TEnum).IsEnum)
        {
            // attempt to parse value
            var success = BindConverter.TryConvertTo<TEnum>(value, System.Globalization.CultureInfo.CurrentCulture, out var parsedValue);
            if(success)
            {
                result = parsedValue;
                validationErrorMessage = null;
                return true;
            }
            else
            {
                result = default;
                validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid";
                return false;
            }
        }
        throw new InvalidOperationException($"{GetType()} does not support the type '{typeof(TEnum)}'.");
    }
}*@
