@using System
@using System.Globalization
@typeparam TValue
@inherits BsControlBase<TValue>
<BsValidatedGroup Label="@Label" Id="@Id" ValueExpression="@ValueExpression">
    <input type="date" @attributes="AdditionalAttributes" class="form-control @CssClass"
           value="@CurrentValueAsString" @onchange="@CurrentValueChanged"
           disabled="@(Mode == EditMode.ReadOnly)" />
</BsValidatedGroup>
@code
{
    protected override void OnInitialized()
    {
        // set isNullable
        var underlyingType = Nullable.GetUnderlyingType(typeof(TValue));
        isNullable = (underlyingType != null);
        base.OnInitialized();
    }

    /// <summary>
    /// Set date value
    /// </summary>
    /// <param name="e"></param>
    protected void CurrentValueChanged(ChangeEventArgs e) => CurrentValueAsString = (string)e.Value;

    /// <summary>
    /// Is the datatype nullable
    /// </summary>
    private bool isNullable;

    private const string DateFormat = "yyyy-MM-dd"; // Compatible with HTML date inputs

    /// <summary>
    /// Gets or sets the error message used when displaying an a parsing error.
    /// </summary>
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a date.";

    /// <inheritdoc />
    protected override string FormatValueAsString(TValue value)
    {
        switch (value)
        {
            case DateTime dateTimeValue:
                // if value is default date, return a null string
                if (dateTimeValue == DateTime.MinValue) return null;
                return BindConverter.FormatValue(dateTimeValue, DateFormat, CultureInfo.InvariantCulture);

            case DateTimeOffset dateTimeOffsetValue:
                if (dateTimeOffsetValue == DateTimeOffset.MinValue) return null;
                return BindConverter.FormatValue(dateTimeOffsetValue, DateFormat, CultureInfo.InvariantCulture);

            default:
                return string.Empty; // Handles null for Nullable<DateTime>, etc.
        }
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string value, out TValue result, out string validationErrorMessage)
    {
        // Unwrap nullable types. We don't have to deal with receiving empty values for nullable
        // types here, because the underlying InputBase already covers that.
        var targetType = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

        bool success;
        if (targetType == typeof(DateTime))
        {
            success = TryParseDateTime(value, out result);
        }
        else if (targetType == typeof(DateTimeOffset))
        {
            success = TryParseDateTimeOffset(value, out result);
        }
        else
        {
            throw new InvalidOperationException($"The type '{targetType}' is not a supported date type.");
        }

        if (success)
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(ParsingErrorMessage, FieldIdentifier.FieldName);
            return false;
        }
    }

    static bool TryParseDateTime(string value, out TValue result)
    {
        var success = BindConverter.TryConvertToDateTime(value, CultureInfo.InvariantCulture, DateFormat, out var parsedValue);
        if (success)
        {
            result = (TValue)(object)parsedValue;
            return true;
        }
        else
        {
            result = default;
            return false;
        }
    }

    static bool TryParseDateTimeOffset(string value, out TValue result)
    {
        var success = BindConverter.TryConvertToDateTimeOffset(value, CultureInfo.InvariantCulture, DateFormat, out var parsedValue);
        if (success)
        {
            result = (TValue)(object)parsedValue;
            return true;
        }
        else
        {
            result = default;
            return false;
        }
    }
}
