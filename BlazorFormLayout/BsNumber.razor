@typeparam TNumber
@inherits BsControlBase<TNumber>
<BsValidatedGroup Label="@Label" Id="@Id" TType="TNumber" ValueExpression="@ValueExpression">
    <input type="number" @bind="@CurrentValue" id="@Id"
           @attributes="AdditionalAttributes" disabled="@(Mode == EditMode.ReadOnly)"
           class="form-control @CssClass" step="@Step" />
</BsValidatedGroup>
@code
{
    protected override void OnInitialized()
    {
        underlyingType = Nullable.GetUnderlyingType(typeof(TNumber)) ?? typeof(TNumber);
        base.OnInitialized();
    }

    private Type underlyingType;

    protected override bool TryParseValueFromString(string value, out TNumber result, out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Get default Step attribute value for type
    /// </summary>
    /// <returns></returns>
    private string GetStepSize()
    {
        if (underlyingType == typeof(decimal)) return "0.01";
        return null;
    }

    protected string Step
    {
        get
        {
            // use 'step' attribute if present
            if (AdditionalAttributes != null &&
                AdditionalAttributes.TryGetValue("step", out object step) &&
                !string.IsNullOrEmpty(Convert.ToString(step)))
            {
                return Convert.ToString(step);
            }
            // use default value based on type
            return GetStepSize();
        }
    }
}
